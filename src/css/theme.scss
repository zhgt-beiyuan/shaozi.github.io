/* [x] scss 主题函数（暂时废弃，统一通过 CSS 全局变量控制） */
$theme-map: null; // 声明该变量才可使用 !global

// $themes 变量用来定义各主题下的 key 及对应的颜色，由 map-get 函数传来的 key 去对应的查找
$themes: (
  light: (
    // #{'key'}: #{'value'},
    // 🌰
    background_color1: #fff,
  ),
  dark: (
    // #{'key'}: #{'value'},
    background_color1: #333,
  ),
);

@mixin themeify {
  @each $name, $map in $themes {
    // !global 把局部变量强升为全局变量
    $theme-map: $map !global; // 将各主题下的 key 及对应的值提升为全局，便于 map-get 函数使用
    // & 父容器标识（类名）
    // @content 是混合器插槽，像 vue 的 slot
    [data-theme='#{$name}'] & {
      @content;
    }
  }
}

// map-get(map, key) 函数，从 map 对象中根据 key 获取其对应的 value
@function themed($key) {
  @return map-get($theme-map, $key);
}

// 背景颜色
@mixin theme_bg_color($key) {
  @include themeify {
    background-color: themed($key); // 对应 @content
  }
}
// 字体颜色
@mixin theme_font_color($key) {
  @include themeify {
    color: themed($key);
  }
}
// 边框颜色
@mixin theme_border_color($key) {
  @include themeify {
    border-color: themed($key);
  }
}
// 盒阴影
@mixin theme_shadow_color($key) {
  @include themeify {
    box-shadow: themed($key);
  }
}

// 🌰 使用方式，直接在类中使用，只需定义各主题下所需要的 key 即可
.example {
  @include theme_bg_color('background_color1');
  // ...
}
